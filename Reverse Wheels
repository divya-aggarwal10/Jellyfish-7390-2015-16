package com.qualcomm.ftcrobotcontroller.opmodes;

//Created by Valen on 10/13/2015.
import com.qualcomm.robotcore.eventloop.opmode.OpMode;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.util.Range;

/**
 * TeleOp Mode
 * <p>
 * Enables control of the robot via the gamepad
 */
public class ReverseWheels extends OpMode {

    /*
     * Note: the configuration of the servos is such that
     * as the arm servo approaches 0, the arm position moves up (away from the floor).
     * Also, as the claw servo approaches 0, the claw opens up (drops the game element).
     */
    // TETRIX VALUES.

    /*final static double DUMPRIGHT_MIN_RANGE  = -0.5;
    final static double DUMPRIGHT_MAX_RANGE  = 0.5;
    final static double DUMPLEFT_MIN_RANGE  = -0.5;
    final static double DUMPLEFT_MAX_RANGE  = 0.5;
    */
    // amount to change the arm servo position.
    double armDelta = 0.01;
    int gamepadREVERSE = 0;
    int gamepadFLIP = 0;
    int gamepadREVERSEFLIP = 0;
    int gamepadNORMAL = 1;
    double left;
    double right;
    double scaleFactor = 1, powerZiptTie=0.0, powerArm = 0.0;
    int zipOnFW = 0;
    int zipOnBW = 0;
    // position of the dumpRight servo.
    double dumpRightPosition;
    double dumpLeftPosition;

    //*************************  Motors instantiation
    //all motors are DC motors
    DcMotor motorRightFront;
    DcMotor motorLeftFront;
    DcMotor motorRightBack;
    DcMotor motorLeftBack;
    DcMotor ziptie;
    //DcMotor arm1;
    //DcMotor arm2;

    //*************************  Servo instantiation
    //Servo servo1;
    //Servo servo2;
    //Servo dumpLeft;
    //Servo dumpRight;


    //************************** Constructor
    public ReverseWheels() {
    }

    /*
     * Code to run when the op mode is first enabled goes here
     *
     * @see com.qualcomm.robotcore.eventloop.opmode.OpMode#start()
     */
    @Override
    public void init() {
		/*
		 * Use the hardwareMap to get the dc motors and servos by name. Note
		 * that the names of the devices must match the names used when you
		 * configured your robot and created the configuration file.
		 */

		/*
		 * Sets motors 1 and 2 to the right side and motors 3 and 4 to the left side(reversed)
		 * motor 5 and 6 are reserved for shooters(for lack of a better name)
		 * We need another motor control now.
		 */
        motorRightFront = hardwareMap.dcMotor.get("motor_1");
        motorLeftFront = hardwareMap.dcMotor.get("motor_3");
        motorRightBack = hardwareMap.dcMotor.get("motor_2");
        motorLeftBack = hardwareMap.dcMotor.get("motor_4");
        //ziptie = hardwareMap.dcMotor.get("motor_5");
        motorLeftFront.setDirection(DcMotor.Direction.REVERSE);
        motorLeftBack.setDirection(DcMotor.Direction.REVERSE);

        //****************** dc motors
        //arm1 = hardwareMap.dcMotor.get("motor_5");
        //arm2 = hardwareMap.dcMotor.get("motor_6");
        //arm2.setDirection(DcMotor.Direction.REVERSE);

        //******************* servos
        //servo1 = hardwareMap.servo.get("servo_1");
        //servo2 = hardwareMap.servo.get("servo_2");
        //dumpLeft = hardwareMap.servo.get("servo_3");
        //dumpRight = hardwareMap.servo.get("servo_4");

    }

    /*
     * This method will be called repeatedly in a loop
     *
     * @see com.qualcomm.robotcore.eventloop.opmode.OpMode#run()
     */
    @Override
    public void loop() {

		/*
		 * Gamepad 1
		 *
		 * Gamepad 1 controls the motors via the left stick, and it controls the
		 * wrist/claw via the a,b, x, y buttons
		 */
        if (gamepad1.x) {
            gamepadREVERSE = 1;
            gamepadFLIP = 0;
            gamepadNORMAL = 0;
            gamepadREVERSEFLIP = 0;
        }
        if (gamepad1.b) {
            gamepadFLIP = 1;
            gamepadNORMAL = 0;
            gamepadREVERSEFLIP = 0;
            gamepadREVERSE = 0;
        }
        if (gamepad1.y) {
            gamepadREVERSEFLIP = 1;
            gamepadNORMAL = 0;
            gamepadREVERSE = 0;
            gamepadFLIP = 0;
        }
        if (gamepad1.a) {
            gamepadNORMAL = 1;
            gamepadREVERSE = 0;
            gamepadFLIP = 0;
            gamepadREVERSEFLIP = 0;
        }
        // tank drive
        if (gamepadREVERSE == 1) {
            left = -gamepad1.left_stick_y;
            right = -gamepad1.right_stick_y;
        }
        else if (gamepadFLIP == 1) {
            left = gamepad1.right_stick_y;
            right = gamepad1.left_stick_y;
        }
        else if (gamepadREVERSEFLIP == 1) {
            left = -gamepad1.right_stick_y;
            right = -gamepad1.left_stick_y;
        }
        else if (gamepadNORMAL ==  1) {
            left = gamepad1.left_stick_y;
            right = gamepad1.right_stick_y;
        } else {
            double left = gamepad1.left_stick_y;
            right = gamepad1.right_stick_y;
        }
        //double powerZipTie=0.0;
        //double powerArm = 0.0;

        // ************************************** set wheel power
        // scale the joystick value to make it easier to control
        // the robot more precisely at slower speeds.
        right = (float)scaleInput(right);
        left =  (float)scaleInput(left);

        if (gamepad1.right_bumper) {
            scaleFactor = 4.0;
        }
        else if (gamepad1.left_bumper) {
            scaleFactor = 0.25;
        } else {
            scaleFactor = 1;
        }

        // increasing sensitivity
        right = right*scaleFactor;
        left =left*scaleFactor;
        // clip the right/left values so that the values never exceed +/- 1
        right = Range.clip(right, -1, 1);
        left = Range.clip(left, -1, 1);

        // write the values to the motors
        motorRightFront.setPower(right);
        motorLeftFront.setPower(left);
        motorRightBack.setPower(right);
        motorLeftBack.setPower(left);

        //***********************************************  set power to Arms
        /*
        if (gamepad2.dpad_up) {
            powerArm = 0.75;
        } else if (gamepad2.dpad_down) {
            powerArm = -0.75;
        } else {
            powerArm = 0.0;
        }
        arm1.setPower(powerArm);
        arm2.setPower(powerArm);
        */

        //********************************************* set position to weird thingys
        /*
        if (gamepad1.x) {
            servo1.setPosition(0.75);
            servo2.setPosition(0.75);
        }*/


        //**************************************** set power Zipties
        /*if (gamepad2.a) {
            powerZiptTie=-1.0;
        }
        else if (gamepad2.y) {
            powerZiptTie=1.0;
        }
        else if (gamepad2.right_bumper) {
            powerZiptTie=0.0;
        }
        else {
            powerZiptTie=0.0;
        }
        ziptie.setPower(powerZiptTie);
        */
        //***************************** servo for dumping: change positions
        /*
        if (gamepad2.a) {
            // if the A button is pushed on gamepad1, increment the position of the arm servo.
            dumpRightPosition += armDelta;
        }
        else if (gamepad2.y) {
            // if the Y button is pushed on gamepad1, decrease the position of the arm servo.
            dumpRightPosition -= armDelta;
        }
        else if (gamepad2.y) {
            // if the A button is pushed on gamepad1, increment the position of the arm servo.
            dumpLeftPosition += armDelta;
        }
        else if (gamepad2.a) {
            // if the Y button is pushed on gamepad1, decrease the position of the arm servo.
            dumpLeftPosition -= armDelta;
        }

        dumpRightPosition = Range.clip(dumpRightPosition, 0, 1);
        dumpLeftPosition = Range.clip(dumpLeftPosition, 0, 1);
        dumpRight.setPosition(dumpRightPosition);
        dumpLeft.setPosition(dumpLeftPosition);
        */


        //sends info back to the phone
        telemetry.addData("Text", "*** Robot Data***");
        //telemetry.addData("DumpRight", "DumpRight:  " + String.format("%.2f", dumpRightPosition));
        //telemetry.addData("DumpLeft", "DumpLeft:  " + String.format("%.2f", dumpLeftPosition));
        telemetry.addData("left tgt pwr",  "left1  pwr: " + String.format("%.2f", left));
        telemetry.addData("right tgt pwr", "right1 pwr: " + String.format("%.2f", right));
        telemetry.addData("Scale Factor", "Scale Factor: " + String.format("%.2f", scaleFactor));

    }

    /*
     * Code to run when the op mode is first disabled goes here
     *
     * @see com.qualcomm.robotcore.eventloop.opmode.OpMode#stop()
     */
    @Override
    public void stop() {

    }

    /*
     * This method scales the joystick input so for low joystick values, the
     * scaled value is less than linear.  This is to make it easier to drive
     * the robot more precisely at slower speeds.
     */
    double scaleInput(double dVal)  {
        double[] scaleArray = { 0.0, 0.05, 0.09, 0.10, 0.12, 0.15, 0.18, 0.24,
                0.30, 0.36, 0.43, 0.50, 0.60, 0.72, 0.85, 1.00, 1.00 };

        // get the corresponding index for the scaleInput array.
        int index = (int) (dVal * 16.0);

        // index should be positive.
        if (index < 0) {
            index = -index;
        }

        // index cannot exceed size of array minus 1.
        if (index > 16) {
            index = 16;
        }

        // get value from the array.
        double dScale = 0.0;
        if (dVal < 0) {
            dScale = -scaleArray[index];
        } else {
            dScale = scaleArray[index];
        }

        // return scaled value.
        return dScale;
    }

}
